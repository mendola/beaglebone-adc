t a/drivers/staging/iio/Documentation/generic_buffer.c b/drivers/staging/iio/Documentation/generic_buffer.c
index 40d0eca..99c7338 100644
--- a/drivers/staging/iio/Documentation/generic_buffer.c
+++ b/drivers/staging/iio/Documentation/generic_buffer.c
@@ -33,6 +33,7 @@
 #include <endian.h>
 #include <getopt.h>
 #include <inttypes.h>
+#include <time.h>
 #include "iio_utils.h"
 
 /**
@@ -143,7 +144,6 @@ int main(int argc, char **argv)
 	unsigned long num_loops = 2;
 	unsigned long timedelay = 1000000;
 	unsigned long buf_len = 128;
-
 	int ret, c, i, j, toread;
 	int fp;
 
@@ -201,29 +201,6 @@ int main(int argc, char **argv)
 	printf("iio device number being used is %d\n", dev_num);
 
 	asprintf(&dev_dir_name, "%siio:device%d", iio_dir, dev_num);
-	if (trigger_name == NULL) {
-		/*
-		 * Build the trigger name. If it is device associated its
-		 * name is <device_name>_dev[n] where n matches the device
-		 * number found above
-		 */
-		ret = asprintf(&trigger_name,
-			       "%s-dev%d", device_name, dev_num);
-		if (ret < 0) {
-			ret = -ENOMEM;
-			goto error_ret;
-		}
-	}
-
-	/* Verify the trigger exists */
-	trig_num = find_type_by_name(trigger_name, "trigger");
-	if (trig_num < 0) {
-		printf("Failed to find the trigger %s\n", trigger_name);
-		ret = -ENODEV;
-		goto error_free_triggername;
-	}
-	printf("iio trigger number being used is %d\n", trig_num);
-
 	/*
 	 * Parse the files in scan_elements to identify what channels are
 	 * present
@@ -246,21 +223,11 @@ int main(int argc, char **argv)
 		ret = -ENOMEM;
 		goto error_free_triggername;
 	}
-	printf("%s %s\n", dev_dir_name, trigger_name);
-	/* Set the device trigger to be the data ready trigger found above */
-	ret = write_sysfs_string_and_verify("trigger/current_trigger",
-					dev_dir_name,
-					trigger_name);
-	if (ret < 0) {
-		printf("Failed to write current_trigger file\n");
-		goto error_free_buf_dir_name;
-	}
-
+	printf("%s\n", dev_dir_name);
 	/* Setup ring buffer parameters */
 	ret = write_sysfs_int("length", buf_dir_name, buf_len);
 	if (ret < 0)
 		goto error_free_buf_dir_name;
-
 	/* Enable the buffer */
 	ret = write_sysfs_int("enable", buf_dir_name, 1);
 	if (ret < 0)
@@ -279,55 +246,38 @@ int main(int argc, char **argv)
 	}
 
 	/* Attempt to open non blocking the access dev */
-	fp = open(buffer_access, O_RDONLY | O_NONBLOCK);
+	fp = open(buffer_access, O_RDONLY|O_NONBLOCK);
 	if (fp == -1) { /* If it isn't there make the node */
 		printf("Failed to open %s\n", buffer_access);
 		ret = -errno;
 		goto error_free_buffer_access;
 	}
-
 	/* Wait for events 10 times */
 	for (j = 0; j < num_loops; j++) {
-		if (!noevents) {
-			struct pollfd pfd = {
-				.fd = fp,
-				.events = POLLIN,
-			};
-
-			poll(&pfd, 1, -1);
-			toread = buf_len;
-
-		} else {
-			usleep(timedelay);
-			toread = 64;
-		}
-
+		usleep(timedelay);
 		read_size = read(fp,
 				 data,
-				 toread*scan_size);
+				 buf_len*scan_size);
+		if (read_size == -1)
+			perror("READ:");
 		if (read_size == -EAGAIN) {
 			printf("nothing available\n");
 			continue;
 		}
 		for (i = 0; i < read_size/scan_size; i++)
-			process_scan(data + scan_size*i,
-				     channels,
-				     num_channels);
+			 process_scan(data + scan_size*i,
+				      channels,
+				      num_channels);
 	}
-
 	/* Stop the buffer */
 	ret = write_sysfs_int("enable", buf_dir_name, 0);
 	if (ret < 0)
 		goto error_close_buffer_access;
 
-	/* Disconnect the trigger - just write a dummy name. */
-	write_sysfs_string("trigger/current_trigger",
-			dev_dir_name, "NULL");
-
 error_close_buffer_access:
 	close(fp);
 error_free_data:
-	free(data);
+		free(data);
 error_free_buffer_access:
 	free(buffer_access);
 error_free_buf_dir_name:
